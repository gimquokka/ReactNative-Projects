import * as React from 'react';
import { getStateFromPath as getStateFromPathDefault, NavigationContainerRef } from '@react-navigation/core';
declare type GetStateFromPath = typeof getStateFromPathDefault;
declare type Config = Parameters<GetStateFromPath>[1];
declare type Options = {
    /**
     * The prefixes are stripped from the URL before parsing them.
     * Usually they are the `scheme` + `host` (e.g. `myapp://chat?user=jane`)
     */
    prefixes: string[];
    /**
     * Config to fine-tune how to parse the path.
     *
     * Example:
     * ```js
     * {
     *   Chat: {
     *     path: 'chat/:author/:id',
     *     parse: { id: Number }
     *   }
     * }
     * ```
     */
    config?: Config;
    /**
     * Custom function to parse the URL object to a valid navigation state (advanced).
     */
    getStateFromPath?: GetStateFromPath;
};
export default function useLinking(ref: React.RefObject<NavigationContainerRef>, { prefixes, config, getStateFromPath }: Options): {
    getInitialState: () => Promise<(Partial<Pick<import("@react-navigation/core").NavigationState, "index">> & {
        stale?: true | undefined;
        type?: string | undefined;
        routes: (Pick<import("@react-navigation/core").Route<string>, "params" | "name"> & {
            key?: string | undefined;
            state?: import("@react-navigation/core").InitialState | undefined;
        })[];
    } & {
        state?: (Partial<Pick<import("@react-navigation/core").NavigationState, "index">> & {
            stale?: true | undefined;
            type?: string | undefined;
            routes: (Pick<import("@react-navigation/core").Route<string>, "params" | "name"> & {
                key?: string | undefined;
                state?: import("@react-navigation/core").InitialState | undefined;
            })[];
        } & any) | undefined;
    }) | undefined>;
};
export {};
